// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

// Top level

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?
  userId             Int?
  user               User[]    @relation(fields: [userId], references: [id])
}

enum TokenType {
  RESET_PASSWORD
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String
  user        User      @relation(fields: [userId], references: [id])
  userId      Int

  @@unique([hashedToken, type])
}

model Organization {
  id               Int               @id @default(autoincrement())
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  name             String
  memberships      Membership[]
  patients         Patient[]
  patientRelations PatientRelation[]
  services         Service[]
  contacts         Contact[]
  phones           Phone[]
  addresses        Address[]
  appointments     Appointment[]
  goals            Goal[]
  notes            Note[]
  goalStatuses     GoalStatus[]
  goalCategories   GoalCategory[]
  scores           Score[]
  scoreTypes       ScoreType[]
  licenses         License[]
}

model Membership {
  id             Int            @id @default(autoincrement())
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  organizationId Int
  userId         Int?
  licenseId      Int?
  role           MembershipRole

  user         User?        @relation(fields: [userId], references: [id])
  organization Organization @relation(fields: [organizationId], references: [id])
  license      License?

  invitedName  String?
  invitedEmail String?

  @@unique([organizationId, invitedEmail])
}

enum MembershipRole {
  OWNER
  CLINICIAN_ADMIN
  CLINICIAN_BASIC
  SUPERVISOR
  BILLER
  SCHEDULER

  PATIENT
}

enum GlobalRole {
  SUPERADMIN
  CUSTOMER
}

model User {
  id             Int        @id @default(autoincrement())
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  username       String     @unique
  hashedPassword String?
  contactId      Int?
  role           GlobalRole @default(CUSTOMER)

  memberships Membership[]
  contact     Contact?     @relation(fields: [contactId], references: [id])
  tokens      Token[]
  sessions    Session[]
  notes       Note[]
  scores      Score[]
}

model Patient {
  id             Int      @id @default(autoincrement())
  organizationId Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  isActive       Boolean  @default(true)

  patientRelations PatientRelation[]
  appointments     Appointment[]
  goals            Goal[]
  organization     Organization      @relation(fields: [organizationId], references: [id])
}

model PatientRelation {
  id                     Int                 @id @default(autoincrement())
  organizationId         Int
  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt
  patientId              Int
  contactId              Int
  isMinor                Boolean             @default(false)
  responsibileForBilling Boolean             @default(false)
  isEmergencyContact     Boolean             @default(false)
  receivesReminders      Boolean             @default(true)
  relationType           PatientRelationType @default(PATIENT)

  organization Organization @relation(fields: [organizationId], references: [id])
  patient      Patient      @relation(fields: [patientId], references: [id])
  contact      Contact?     @relation(fields: [contactId], references: [id])
  @@unique([patientId, contactId])
}

enum PatientRelationType {
  PATIENT
  PARENT
  GUARDIAN
  FAMILY_MEMBER
  OTHER
}

model Contact {
  id              Int              @id @default(autoincrement())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  firstName       String
  lastName        String
  preferredName   String?
  email           String?
  dateOfBirth     DateTime?
  organizationId  Int
  user            User?
  patientRelation PatientRelation?
  address         Address?
  phones          Phone[]
  organization    Organization     @relation(fields: [organizationId], references: [id])
}

model Phone {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  number         String
  contactId      Int?
  allowCalls     Boolean      @default(false)
  allowTexts     Boolean      @default(false)
  organizationId Int
  phoneType      PhoneType    @default(MOBILE)
  contact        Contact?     @relation(fields: [contactId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])
}

enum PhoneType {
  MOBILE
  HOME
  WORK
  FAX
}

model Address {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  street         String?
  street2        String?
  city           String?
  region         String?      @default("TX")
  postcode       String?
  country        String?      @default("USA")
  organizationId Int
  contactId      Int?
  contact        Contact?     @relation(fields: [contactId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])
}

model Appointment {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  scheduledAt    DateTime?
  startedAt      DateTime?
  endedAt        DateTime?
  duration       Int?
  patientId      Int
  organizationId Int
  patient        Patient      @relation(fields: [patientId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])
}

model Note {
  id             Int          @id @default(autoincrement())
  userId         Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  noteTypeId     Int
  body           String       @default("")
  organizationId Int
  goalId         Int
  author         User         @relation(fields: [userId], references: [id])
  goal           Goal         @relation(fields: [goalId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])
}

model Goal {
  id                 Int      @id @default(autoincrement())
  title              String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  patientId          Int
  goalStatusId       Int      @default(1)
  goalCategoryId     Int
  parentGoalId       Int?
  defaultScoreTypeId Int?
  organizationId     Int

  status       GoalStatus   @relation(fields: [goalStatusId], references: [id])
  parentGoal   Goal?        @relation("GoalToGoal", fields: [parentGoalId], references: [id])
  patient      Patient      @relation(fields: [patientId], references: [id])
  scoreType    ScoreType?   @relation(fields: [defaultScoreTypeId], references: [id])
  category     GoalCategory @relation(fields: [goalCategoryId], references: [id])
  childGoals   Goal[]       @relation("GoalToGoal")
  scores       Score[]
  notes        Note[]
  organization Organization @relation(fields: [organizationId], references: [id])
}

model GoalStatus {
  id             Int          @id @default(autoincrement())
  name           String       @unique
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organizationId Int
  Goal           Goal[]
  organization   Organization @relation(fields: [organizationId], references: [id])
}

model GoalCategory {
  id             Int          @id @default(autoincrement())
  name           String       @unique
  color          String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organizationId Int
  Goal           Goal[]
  organization   Organization @relation(fields: [organizationId], references: [id])
}

model Score {
  id             Int          @id @default(autoincrement())
  createdBy      Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  value          Float
  goalId         Int
  scoreTypeId    Int
  organizationId Int
  type           ScoreType    @relation(fields: [scoreTypeId], references: [id])
  goal           Goal         @relation(fields: [goalId], references: [id])
  user           User         @relation(fields: [createdBy], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])
}

model ScoreType {
  id             Int          @id @default(autoincrement())
  name           String       @unique
  createdAt      DateTime     @default(now())
  organizationId Int
  Score          Score[]
  Goal           Goal[]
  organization   Organization @relation(fields: [organizationId], references: [id])
}

model License {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  membershipId   Int
  type           String
  number         String
  expiresAt      DateTime
  state          String
  organizationId Int

  membership   Membership   @relation(fields: [membershipId], references: [id])
  organization Organization @relation(fields: [organizationId], references: [id])
}

model Service {
  id              Int      @id @default(autoincrement())
  organizationId  Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  description     String
  rate            Int
  defaultDuration Int
  isActive        Boolean  @default(true)
  billInUnits     Boolean  @default(false)
  isDefault       Boolean  @default(false)

  organization Organization @relation(fields: [organizationId], references: [id])
}
