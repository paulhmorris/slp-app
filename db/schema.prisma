// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

enum Role {
  USER
  ADMIN
}

model User {
  id             Int       @id @default(autoincrement())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  name           String?
  email          String    @unique
  hashedPassword String?
  role           Role      @default(USER)
  tokens         Token[]
  sessions       Session[]
  Note           Note[]
  Score          Score[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?
  user               User[]    @relation(fields: [userId], references: [id])
  userId             Int?
}

enum TokenType {
  RESET_PASSWORD
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

model Patient {
  id             Int              @id @default(autoincrement())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  firstName      String
  lastName       String
  email          String
  dateOfBirth    DateTime
  isActive       Boolean          @default(true)
  PatientSession PatientSession[]
  goals          Goal[]
}

model PatientSession {
  id              Int           @id @default(autoincrement())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  sessionTypeId   Int
  duration        Int?
  patientId       Int
  sessionStatusId Int           @default(1)
  status          SessionStatus @relation(fields: [sessionStatusId], references: [id])
  notes           Note[]
  patient         Patient       @relation(fields: [patientId], references: [id])
  type            SessionType   @relation(fields: [sessionTypeId], references: [id])
}

model SessionType {
  id             Int              @id @default(autoincrement())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  name           String           @unique
  PatientSession PatientSession[]
  Goal           Goal[]
}

model SessionStatus {
  id             Int              @id @default(autoincrement())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  name           String
  PatientSession PatientSession[]
}

model Note {
  id               Int            @id @default(autoincrement())
  author           User           @relation(fields: [userId], references: [id])
  userId           Int
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  body             String         @default("")
  patientSession   PatientSession @relation(fields: [patientSessionId], references: [id])
  patientSessionId Int
}

model Goal {
  id             Int      @id @default(autoincrement())
  title          String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  patientId      Int
  sessionTypeId  Int
  goalStatusId   Int      @default(1)
  parentGoalId   Int?
  goalCategoryId Int?

  type       SessionType   @relation(fields: [sessionTypeId], references: [id])
  status     GoalStatus    @relation(fields: [goalStatusId], references: [id])
  parentGoal Goal?         @relation("GoalToGoal", fields: [parentGoalId], references: [id])
  patient    Patient       @relation(fields: [patientId], references: [id])
  category   GoalCategory? @relation(fields: [goalCategoryId], references: [id])
  Goal       Goal[]        @relation("GoalToGoal")
  Score      Score[]
}

model GoalStatus {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Goal      Goal[]
}

model GoalCategory {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Goal      Goal[]
}

model Score {
  id        Int      @id @default(autoincrement())
  createdBy Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  value     Float
  goalId    Int
  goal      Goal     @relation(fields: [goalId], references: [id])
  User      User?    @relation(fields: [createdBy], references: [id])
}
