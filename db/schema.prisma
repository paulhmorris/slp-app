// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

// Top level

enum MembershipRole {
  OWNER
  ADMIN
  USER
}

enum GlobalRole {
  SUPERADMIN
  CUSTOMER
}

model Organization {
  id             Int              @id @default(autoincrement())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  name           String
  memberships    Membership[]
  Patient        Patient[]
  Address        Address[]
  PatientSession PatientSession[]
  Note           Note[]
  Goal           Goal[]
  GoalStatus     GoalStatus[]
  GoalCategory   GoalCategory[]
  SessionType    SessionType[]
  SessionStatus  SessionStatus[]
  Score          Score[]
  ScoreType      ScoreType[]
  PatientContact PatientContact[]
}

model Membership {
  id             Int            @id @default(autoincrement())
  role           MembershipRole
  organizationId Int
  invitedName    String?
  invitedEmail   String?
  userId         Int?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  user           User?          @relation(fields: [userId], references: [id])
  organization   Organization   @relation(fields: [organizationId], references: [id])
}

model User {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  name           String?
  image          String?
  email          String       @unique
  hashedPassword String?
  role           GlobalRole
  phone          Phone[]
  tokens         Token[]
  sessions       Session[]
  notes          Note[]
  scores         Score[]
  memberships    Membership[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?
  userId             Int?
  user               User[]    @relation(fields: [userId], references: [id])
}

enum TokenType {
  RESET_PASSWORD
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String
  user        User      @relation(fields: [userId], references: [id])
  userId      Int

  @@unique([hashedToken, type])
}

model Patient {
  id             Int              @id @default(autoincrement())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  firstName      String
  lastName       String
  email          String
  dateOfBirth    DateTime
  isActive       Boolean          @default(true)
  organizationId Int
  sessions       PatientSession[]
  goals          Goal[]
  address        Address?
  phones         Phone[]
  organization   Organization     @relation(fields: [organizationId], references: [id])
}

enum ContactType {
  PARENT
  GUARDIAN
  FAMILY_MEMBER
  OTHER
}

model PatientContact {
  id                     Int          @id @default(autoincrement())
  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @updatedAt
  firstName              String
  lastName               String
  email                  String?
  responsibileForBilling Boolean      @default(false)
  organizationId         Int
  contactType            ContactType  @default(PARENT)
  organization           Organization @relation(fields: [organizationId], references: [id])
  phones                 Phone?
}

enum PhoneType {
  MOBILE
  HOME
  WORK
}

model Phone {
  id               Int             @id @default(autoincrement())
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  number           String
  patientId        Int?
  patientContactId Int?
  userId           Int?
  phoneType        PhoneType       @default(MOBILE)
  patient          Patient?        @relation(fields: [patientId], references: [id])
  patientContact   PatientContact? @relation(fields: [patientContactId], references: [id])
  user             User?           @relation(fields: [userId], references: [id])
}

model Address {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  street         String?
  city           String?
  region         String?      @default("TX")
  postcode       String?
  country        String?      @default("USA")
  patientId      Int?
  organizationId Int
  patient        Patient?     @relation(fields: [patientId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])
}

model PatientSession {
  id              Int           @id @default(autoincrement())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  scheduledAt     DateTime?
  startedAt       DateTime?
  endedAt         DateTime?
  sessionTypeId   Int
  duration        Int?
  patientId       Int
  sessionStatusId Int           @default(1)
  organizationId  Int
  status          SessionStatus @relation(fields: [sessionStatusId], references: [id])
  patient         Patient       @relation(fields: [patientId], references: [id])
  type            SessionType   @relation(fields: [sessionTypeId], references: [id])
  organization    Organization  @relation(fields: [organizationId], references: [id])
}

model SessionType {
  id             Int              @id @default(autoincrement())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  name           String           @unique
  organizationId Int
  PatientSession PatientSession[]
  Goal           Goal[]
  organization   Organization     @relation(fields: [organizationId], references: [id])
}

model SessionStatus {
  id             Int              @id @default(autoincrement())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  name           String           @unique
  organizationId Int
  PatientSession PatientSession[]
  organization   Organization     @relation(fields: [organizationId], references: [id])
}

model Note {
  id             Int          @id @default(autoincrement())
  userId         Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  body           String       @default("")
  organizationId Int
  goalId         Int
  author         User         @relation(fields: [userId], references: [id])
  goal           Goal         @relation(fields: [goalId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])
}

model Goal {
  id             Int      @id @default(autoincrement())
  title          String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  patientId      Int
  goalStatusId   Int      @default(1)
  goalCategoryId Int
  sessionTypeId  Int      @default(1)
  parentGoalId   Int?
  scoreTypeId    Int?
  organizationId Int

  type         SessionType  @relation(fields: [sessionTypeId], references: [id])
  status       GoalStatus   @relation(fields: [goalStatusId], references: [id])
  parentGoal   Goal?        @relation("GoalToGoal", fields: [parentGoalId], references: [id])
  patient      Patient      @relation(fields: [patientId], references: [id])
  scoreType    ScoreType?   @relation(fields: [scoreTypeId], references: [id])
  category     GoalCategory @relation(fields: [goalCategoryId], references: [id])
  childGoals   Goal[]       @relation("GoalToGoal")
  scores       Score[]
  notes        Note[]
  organization Organization @relation(fields: [organizationId], references: [id])
}

model GoalStatus {
  id             Int          @id @default(autoincrement())
  name           String       @unique
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organizationId Int
  Goal           Goal[]
  organization   Organization @relation(fields: [organizationId], references: [id])
}

model GoalCategory {
  id             Int          @id @default(autoincrement())
  name           String       @unique
  color          String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organizationId Int
  Goal           Goal[]
  organization   Organization @relation(fields: [organizationId], references: [id])
}

model Score {
  id             Int          @id @default(autoincrement())
  createdBy      Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  value          Float
  goalId         Int
  scoreTypeId    Int
  organizationId Int
  type           ScoreType    @relation(fields: [scoreTypeId], references: [id])
  goal           Goal         @relation(fields: [goalId], references: [id])
  user           User         @relation(fields: [createdBy], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])
}

model ScoreType {
  id             Int          @id @default(autoincrement())
  name           String       @unique
  createdAt      DateTime     @default(now())
  organizationId Int
  Score          Score[]
  Goal           Goal[]
  organization   Organization @relation(fields: [organizationId], references: [id])
}
